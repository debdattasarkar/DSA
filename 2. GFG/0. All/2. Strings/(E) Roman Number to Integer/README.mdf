
---

# 🏛️ Roman Number to Integer

**Difficulty:** Easy
**Accuracy:** 43.31%
**Submissions:** 188K+
**Points:** 2
**Average Time:** 20 min

---

## 💬 Problem Statement

Given a string `s` in **Roman numeral format**, your task is to convert it into an **integer**.

Roman symbols and their values:

| Symbol | Value |
| ------ | ----- |
| I      | 1     |
| V      | 5     |
| X      | 10    |
| L      | 50    |
| C      | 100   |
| D      | 500   |
| M      | 1000  |

> **Rule**:
> If a smaller value appears **before** a larger one (like `IV`), subtract it.
> Else, add it.

---

## 📘 Examples

### Example 1:

```
Input:  s = "IX"
Output: 9
Explanation: I (1) before X (10) → 10 - 1 = 9
```

### Example 2:

```
Input:  s = "XL"
Output: 40
Explanation: X (10) before L (50) → 50 - 10 = 40
```

### Example 3:

```
Input:  s = "MCMIV"
Output: 1904
Explanation:
  M (1000)
+ CM (1000 - 100 = 900)
+ IV (5 - 1 = 4)
→ Total = 1000 + 900 + 4 = 1904
```

---

## 🔍 Step-by-Step Dry Run (Example: "MCMIV")

Let `s = "MCMIV"`

| Index | s\[i] | Value | Next s\[i+1] | Action                 | Total |
| ----- | ----- | ----- | ------------ | ---------------------- | ----- |
| 0     | M     | 1000  | C (100)      | 1000 >= 100 → Add 1000 | 1000  |
| 1     | C     | 100   | M (1000)     | 100 < 1000 → Subtract  | 900   |
| 2     | M     | 1000  | I (1)        | 1000 >= 1 → Add        | 1900  |
| 3     | I     | 1     | V (5)        | 1 < 5 → Subtract       | 1899  |
| 4     | V     | 5     | N/A          | Add                    | 1904  |

---

## 📋 Constraints

* $1 \leq$ Roman number $\leq 3999$
* $s[i] \in \{I, V, X, L, C, D, M\}$

---

## 🧠 Expected Complexities

* **Time Complexity**: O(n)
* **Space Complexity**: O(1)

---

## ✅ Optimized Solutions

### 🐍 Python

```python
class Solution:
    def romanToInt(self, s: str) -> int:
        roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50,
                 'C': 100, 'D': 500, 'M': 1000}
        total = 0
        prev = 0

        # Traverse from right to left
        for ch in reversed(s):
            val = roman[ch]
            if val < prev:
                total -= val  # Subtract if smaller than next numeral
            else:
                total += val  # Add otherwise
            prev = val

        return total
```

---

### 💠 C++

```cpp
class Solution {
public:
    int romanToInt(string s) {
        unordered_map<char, int> roman = {
            {'I', 1}, {'V', 5}, {'X', 10}, {'L', 50},
            {'C', 100}, {'D', 500}, {'M', 1000}
        };

        int total = 0, prev = 0;
        for (int i = s.length() - 1; i >= 0; --i) {
            int val = roman[s[i]];
            if (val < prev)
                total -= val;  // Subtract if smaller than the right symbol
            else
                total += val;  // Add otherwise
            prev = val;
        }
        return total;
    }
};
```

---

### 🌐 JavaScript

```javascript
class Solution {
    romanToInt(s) {
        const roman = {
            'I': 1, 'V': 5, 'X': 10, 'L': 50,
            'C': 100, 'D': 500, 'M': 1000
        };

        let total = 0;
        let prev = 0;

        // Loop from right to left
        for (let i = s.length - 1; i >= 0; i--) {
            const val = roman[s[i]];
            if (val < prev) {
                total -= val;
            } else {
                total += val;
            }
            prev = val;
        }

        return total;
    }
}
```

---

## 💬 Common Interview Questions & Answers

### Q1. Why do we traverse from right to left?

**A:** So we can easily detect when a smaller numeral appears before a larger one (e.g., "IV", "IX"), and subtract instead of add.

---

### Q2. How do we handle invalid Roman numerals?

**A:** This problem assumes valid input. In real-world applications, validation would be needed to ensure correct combinations (e.g., "IIII" is invalid).

---

### Q3. Can we do this using a stack?

**A:** Yes, but it's not optimal. Stack incurs O(n) space, while the optimized reverse traversal solution does it in O(1) space.

---

### Q4. What's the edge case for smallest/longest input?

**A:**

* Smallest: `"I"` → Output: 1
* Longest valid Roman numeral is `"MMMCMXCIX"` = 3999

---

## 🏢 Company Tags

* Zoho
* Amazon
* Microsoft
* Facebook
* Twitter
* Uber

---

## 🏷️ Topic Tags

* Strings
* Data Structures

---

## 📚 Related Articles

* [Roman Number To Integer](https://www.geeksforgeeks.org/converting-roman-numerals-decimal-lying-1-3999/)

---

